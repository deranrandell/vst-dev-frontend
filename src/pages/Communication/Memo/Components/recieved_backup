import { useState,useEffect } from "react";
import { Button, makeStyles, Menu, MenuItem, SvgIcon, Grid } from "@material-ui/core";
import AddRounded from "@material-ui/icons/AddRounded";
import ViewIcon from "@material-ui/icons/Visibility";
import MoreIcon from "@material-ui/icons/MoreVert";

import { useHttp } from "hooks";
import { Container, IndexTable } from "components";
import { getRecievedMemos, getMemo } from "shared/services";
import { Memo } from "shared/models";
import { MemoSchema } from "shared/utilities/dataGridSchema";
import { createArray } from "shared/utilities/common.util";
import { DataGrid } from '@material-ui/data-grid';

import actionCable from "actioncable";

const useStyles = makeStyles(theme => ({
    moreBtn: {
        cursor: "pointer",
        "&:hover": { color: theme.palette.primary.dark }
    },
    actionIcon: {
        "& > :not(:last-child)": {
            marginRight: theme.spacing(1.5),
            fontSize: theme.spacing(2.5)
        }
    }
}))

const RecievedEmails = ({ history }) => {
    const classes = useStyles();
    const { notify, requestHandler } = useHttp();
    const [refreshTable, setRefreshTable] = useState(false);
    const [anchorElList, setAnchorElList] = useState([]);
    const [tableData, setTableData] = useState([]);
    const [tableDataCount, setTableDataCount] = useState();

    const CableApp = {}
    CableApp.cable = actionCable.createConsumer('ws://localhost:3000/cable')
    CableApp.cable.subscriptions.create({
        channel: 'MemoChannel',
        room: localStorage.getItem('user_id'),
        user: localStorage.getItem('token')
    },
    {
        received: (res) => {
            const data = JSON.parse(res["message"])
            const count = data.meta.pagination.count;
            setTableDataCount(prev =>  prev + count)
            setTableData(prev => [data, ...prev]);
        },
        connected: ()=>{
            console.log("Online")
        }
    });
    
    // const renderActions = (row) => (<>
    //     <SvgIcon component={MoreIcon} className={classes.moreBtn} onClick={e => setAnchorElement(e, row.id)} />
    //     <Menu
    //         anchorEl={anchorElList[row.id]}
    //         keepMounted
    //         open={Boolean(anchorElList[row.id])}
    //         onClose={() => clearAnchorElement(row.id)}
    //         getContentAnchorEl={null}
    //         anchorOrigin={{ vertical: "bottom", horizontal: "left" }}
    //         transformOrigin={{ vertical: "top", horizontal: "left" }}
    //     >
    //         <MenuItem onClick={() => viewHandler(row.id)} className={classes.actionIcon}>
    //             <ViewIcon color={"action"} /> View
    //         </MenuItem>
    //     </Menu>
    // </>);

    // const setAnchorElement = (e, index) => {
    //     e.stopPropagation();
    //     let newAnchorElList = [...anchorElList];
    //     newAnchorElList[index] = e.currentTarget;
    //     setAnchorElList(newAnchorElList);
    // };

    // const clearAnchorElement = (index) => {
    //     let newAnchorElList = [...anchorElList];
    //     newAnchorElList[index] = null;
    //     setAnchorElList(newAnchorElList);
    // };

    useEffect(() => {
        setTimeout(() => new Promise(async (resolve) =>{
            try {
                const limit = 50
                const per_page = limit;
                const page_no = 1;
                const filter = {};
                const sort = '';
                const res = await requestHandler(getRecievedMemos({ per_page, page_no, sort, filter }));
                const data = res.data;
                const count = res.meta.pagination.count;
                setAnchorElList(createArray(data.length));
                resolve(setTableData(data));
                setRefreshTable(true)
            } catch (e) {
                console.error(e);
                setTableData({ data: [], count: 0 });
                resolve({ data: [], count: 0 });
            }
        }), 1000)
      }, []);

    // const getMemoList = ({ per_page, page_no, sort, filter }) => new Promise(async (resolve) => {
    //     try {
    //         const res = await requestHandler(getRecievedMemos({ per_page, page_no, sort, filter }));
    //         const data = res.data;
    //         const count = res.meta.pagination.count;
    //         setAnchorElList(createArray(data.length));
    //         resolve({ data, count });
    //         debugger;
    //         setTableData(data)
    //         setRefreshTable(true);
    //     } catch (e) {
    //         console.error(e);
    //         setAnchorElList([]);
    //         resolve({ data: [], count: 0 });
    //     }
    // });

    const onAddClick = () => {
        history.push(`/memo/new`, { data: { action: 'Add', Memo: new Memo() } });
    }

    const viewHandler = async (value) => {
        try {
            const res = await requestHandler(getMemo(value.id), { loader: true });
            history.push(`/memo/view`, { data: { action: 'View', memo: new Memo(res.data) } });
        }catch(e){
            notify({msg: 'Something went wrong', type: 'error'});
        }
    }

    // return (
    //     <>
    //         <Container title="My Recieved Memos" actions={
    //             <Button variant="contained" color="primary" startIcon={<AddRounded />} onClick={onAddClick}>
    //                 Create Memo
    //             </Button>
    //         }>
    //             {refreshTable && <IndexTable
    //                 columns={[
    //                     {
    //                         name: 'actions', header: '', defaultWidth: 60, textAlign: 'center',
    //                         render: ({ data }) => renderActions(data)
    //                     },
    //                     ...MemoSchema.columns
    //                 ]}
    //                 defaultFilterValue={MemoSchema.filter}
    //                 // loadData={tableData}
    //                 loadData={getMemoList}
    //             />}
    //         </Container>
    //     </>
    // );

    const columns = [
        { field: 'id', headerName: 'ID', width: 90 },
        { field: 'subject', headerName: 'subject', width: 500 },
        { field: 'sender_id', headerName: 'Sender', width: 200 },
        { field: 'created_at', headerName: 'Recieved At', width: 300 }
      ];

    //   const row = [{
    //     "id": 2,
    //     "type": "project_user_memo",
    //     "subject": "this is a test email",
    //     "receiver_id": 11,
    //     "sender_id": 7,
    //     "cc": [],
    //     "bcc": [],
    //     "created_at": "2022-04-26T06:32:19.014Z",
    //     "body": [],
    //     "answers": [],
    //     "content": null,
    //     "project_user_memo_replies": [
    //     ]
    // }];
      
    return (<>
        <Container title="My Recieved Memos" actions={
                <Button variant="contained" color="primary" startIcon={<AddRounded />} onClick={onAddClick}>
                    Create Memo
                </Button>
            }>
            <DataGrid
                rows={tableData}
                columns={columns}
                pageSize={20}
                autoHeight
                disableColumnSelector
                disableSelectionOnClick
                onCellClick={viewHandler}
            />
        </Container>
        </>
    )
};

export default RecievedEmails;